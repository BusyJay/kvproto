syntax = "proto2";
package metapb;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

message Cluster {
    optional uint64 id              = 1 [(gogoproto.nullable) = false];
    // max peer count for a region.
    // pd will do the auto-balance if region peer count mismatches.
    optional uint32 max_peer_count  = 2 [(gogoproto.nullable) = false];
    // more attributes......
}

enum StoreState {
    Up        = 0;
    Offline   = 1;
    Tombstone = 2;
}

message Store {
    optional uint64 id        = 1 [(gogoproto.nullable) = false];
    optional string address   = 2 [(gogoproto.nullable) = false];
    optional StoreState state = 3 [(gogoproto.nullable) = false];
    // more attributes......
}

message RegionEpoch {
    // Conf change version, auto increment when add or remove peer
    optional uint64 conf_ver	= 1 [(gogoproto.nullable) = false];
    // Region version, auto increment when split or merge
    optional uint64 version     = 2 [(gogoproto.nullable) = false];
}

enum MergeState {
    // The region is not mergeing.
    None    = 0;
    // The region is preparing to merge.
    Prepare = 1;
    // The region is merging.
    Merging = 2;
}

// When a region wants itself to be merged, if will first send an
// AskMergeRequest to PD. PD will choose a neighbour region as the
// control region, and persists this message into the meta data of
// both regions (The state will be set to MergeState::Prepare).
//
// Then PD will tell (RegionHeartbeatResponse) the control region to
// start merging. The control region should set the state to
// MergeState::Merging after it has started merging.
message RegionMerge {
    optional MergeState state = 1;
    // The ID of the merging region.
    // If the region ID equals this ID, it is the control region.
    optional uint64 into_id   = 2;
    // The ID of the being merged region.
    // If the region ID equals this ID, it will be merged by the control region.
    optional uint64 from_id   = 3;
}

message Region {
    optional uint64 id                  = 1 [(gogoproto.nullable) = false];
    // Region key range [start_key, end_key).
    optional bytes  start_key           = 2;
    optional bytes  end_key             = 3;
    optional RegionEpoch region_epoch   = 4;
    repeated Peer   peers               = 5;
    optional RegionMerge region_merge   = 6;
}

message Peer {      
    optional uint64 id          = 1 [(gogoproto.nullable) = false]; 
    optional uint64 store_id    = 2 [(gogoproto.nullable) = false];
}
